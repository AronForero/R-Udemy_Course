getwd()
names(auto)
auto = read.csv("data/tema1/auto-mpg.csv", header = TRUE, sep = ",")
names(auto)
View(auto)
columns(auto)
columnas(auto)
names(auto)
head(auto)
View(auto)
head(auto, 5)
auto = read.csv("data/tema1/auto-mpg-noheader.csv", header = F
names(auto)
names(auto)
auto = read.csv("data/tema1/auto-mpg-noheader.csv", header = F, sep = ",")
View(auto)
install.packages("XML")
library(XML)
url = "data/tema1/cd_catalog.xml"
DocXML = xmlParse(url)
rootnode = xmlRoot(DocXML)
rootnode[1]
cds_data = xmlSApply(rootnode, function(x) xmlSApply(x, xmlValue))
View(cds_data)
cds.catalog = data.frame(t(cds_data), row.names = NULL)
View(cds.catalog)
cds.catalog = data.frame(t(cds_data))
View(cds.catalog)
View(cds.catalog)
cds.catalog[1:5]
cds.catalog = data.frame(t(cds_data), row.names = NULL)
cds.catalog[1:5]
cds.catalog[1:5,]
cds.catalog[1:5]
cds.catalog[1:5,]
population = "data/tema1/WorldPopulation-wiki.htm"
tablas = readHTMLTable(population)
View(tablas)
tablas[[6]]
most_populated = tablas[[6]]
most_populated
View(most_populated)
cds.catalog[1:5,]
cds.catalog[0:5,]
cds_data
cds_data.t
install.packages("jsonlite")
library(jsonlite)
dat1 = fromJSON("data/tema1/students.json")
View(dat1)
dat2 = fromJSON("data/tema1/student-courses.json")
dat1$Email
#metodo de busqueda
dat1[c(2,5,8),]
#metodo de busqueda
dat1[c(2,5,8),:]
#metodo de busqueda
dat1[c(2,5,8),]
dat1[,c(2,5)]
head(dat1,3)
plot(cars)
install.packages('tidyr')
library(tidyr)
crime_data = read.csv('data/tema1/USArrests.csv')
crime_data = read.csv('data/tema1/USArrests.csv',
stringsAsFactors = FALSE)
View(crime_data)
crime_data = cbind(state = row.names(crime_data), crime_data)
#AÃ±adir una o mas columnas asi:
crime_data = cbind(state = rownames(crime_data), crime_data)
crime_data_1 = gather(crime_data,
key = 'crime_type',
value = 'arrest_estimate',
Murder : UrbanPop)
crime_data_2 = gather(crime_data,
key = 'crime_type',
value = 'arrest_estimate',
-state)
View(crime_data_2)
crime_data_3 = gather(crime_data,
key = 'crime_type',
value = 'arrest_estimate',
Murder, Assault)
View(crime_data_3)
###########################################
#LA FUNCION CONTRARIA DE GATHER :
###########################################
crime_data_4 = spread(crime_data_2,
key='crime_type',
value='arrest_estimate')
View(crime_data_4)
View(crime_data)
crime_data_5 = unite(crime_data,
col = 'Murder_Assault',
Murder, Assault,
sep = '_')
View(crime_data_5)
crime_data_6 = separate(crime_data_5,
col = 'Murder_Assault',
into = c('Murder', 'Assault'),
sep = '_')
View(crime_data_6)
clear
cls
clc
library(mice)
housing_data = read.csv('data/tema1/housing-with-missing-value.csv',
header = TRUE,
stringsAsFactors = FALSE)
View(housing_data)
columns = c('ptratio', 'rad')
imputed_data = mice(housing_data[,names(housing_data)%in%columns],
m = 5,
maxit = 50,
method = 'pmm',
seed = 2018)
imputed_data_1 = mice(housing_data[,columns],
m = 5,
maxit = 50,
method = 'pmm',
seed = 2018)
View(imputed_data)
summary(imputed_data)
summary(imputed_data_1)
complete_data = complete(imputed_data)
View(complete_data)
View(imputed_data_1)
View(imputed_data)
View(complete_data)
summary(imputed_data)
imputed_data = mice(housing_data[,names(housing_data)%in%columns],
m = 5,
maxit = 50,
method = 'pmm',
seed = 2018)
summary(imputed_data)
View(imputed_data)
complete_data = complete(imputed_data)
complete_data = tidy::complete(imputed_data)
complete_data = tidyr::complete(imputed_data)
complete_data = mice::complete(imputed_data)
View(complete_data)
housing_data$ptratio = complete_data$ptratio
housing_data$rad = complete_data$rad
View(housing_data)
anyNA(housing_data)
ozone_data = read.csv('data/tema1/ozone.csv',
stringsAsFactors = FALSE)
View(ozone_data)
outlier_values = boxplot(ozone_data$pressure_height)$out
boxplot(ozone_data$pressure_height)$out
boxplot(ozone_data$pressure_height)
boxplot(ozone_data$pressure_height,
main = 'Presure Height')
boxplot(ozone_data$pressure_height,
main = 'Presure Height',
boxwex = 0.1)
boxplot(ozone_data$pressure_height,
main = 'Presure Height',
boxwex = 0.5)
boxplot(ozone_data$pressure_height,
main = 'Presure Height',
boxwex = 0.4)
summary(ozone_data)
summary(ozone_data$pressure_height)
##Ahora mes a mes
boxplot(pressure_height ~Month,
data = ozone_data,
main='Pressure Height per Month')
boxplot(ozone_reading ~Month,
data = ozone_data,
main='Ozone reading per month')
boxplot(ozone_reading ~Month,
data = ozone_data,
main='Ozone reading per month')$out
mtext('Hola!')
impute_outliers = function(x, removeNA = TRUE)
{
quantiles = quantile(x, c(0.05, 0.95), na.rm = removeNA)
x[x<quantiles[1]] = mean(x, na.rm = removeNA)
x[x>quantiles[2]] = median(x, na.rm = removeNA)
}
imputed_data = impute_outliers(ozone_data$pressure_height)
#dos graficas asi:
par(mfrow = c(1,2))
boxplot(ozone_data$pressure_height,
main='Presion con Outliers')
impute_outliers = function(x, removeNA = TRUE)
{
quantiles = quantile(x, c(0.05, 0.95), na.rm = removeNA)
x[x<quantiles[1]] = mean(x, na.rm = removeNA)
x[x>quantiles[2]] = median(x, na.rm = removeNA)
x
}
imputed_data = impute_outliers(ozone_data$pressure_height)
boxplot(imputed_data, main='Presion sin Outliers')
boxplot(imputed_data, main='Presion sin Outliers',
boxwex = 0.8)
boxplot(ozone_data$pressure_height,
main='Presion con Outliers',
boxwex = 0.8)
boxplot(imputed_data,
main='Presion sin Outliers',
boxwex = 0.8)
#dos graficas asi:
par(mfrow = c(1,2))
boxplot(ozone_data$pressure_height,
main='Presion con Outliers',
boxwex = 0.8)
boxplot(imputed_data,
main='Presion sin Outliers',
boxwex = 0.8)
boxplot(ozone_data$pressure_height,
main='Presion con Outliers',
boxwex = 1)
boxplot(imputed_data,
main='Presion sin Outliers',
boxwex = 1)
replace_outliers = function(x, removeNA=TRUE){
qrts = quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
caps = quantile(x, probs = c(0.05, 0.95), na.rm = removeNA)
iqr = qrts[2]-qrts[1]
h = 1.5*iqr #tambien hay una funcion llamada iqr que devuelve el RI
x[x<qrts[1]-h] = caps[1]
x[x>qrts[2]+h] = caps[2]
x
}
replace_outliers = function(x, removeNA=TRUE){
qrts = quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
caps = quantile(x, probs = c(0.05, 0.95), na.rm = removeNA)
iqr = qrts[2]-qrts[1]
h = 1.5*iqr #tambien hay una funcion llamada iqr que devuelve el RI
x[x<qrts[1]-h] = caps[1]
x[x>qrts[2]+h] = caps[2]
x
}
capped_pressure_height = replace_outliers(ozone_data$pressure_height)
par(mfrow=c(1,2)) #c(filas, columnas)
boxplot(ozone_data$pressure_height,
main='Presion con outliers')
boxplot(capped_pressure_height,
main='Presion sin outliers')
data = read.csv('data/tema2/auto-mpg.csv',
header = TRUE,
stringsAsFactors = FALSE)
View(data)
data$cylinders = factor(data$cylinders,
levels = c(3,4,5,6,8),
labels = c('3cil', '4cil', '5cil', '6cil', '8cil'))
summary(data)
str(data)
summary(data$cylinders)
summary(data$mpg)
str(data$cylinders)
#Para nuevas medidas estadisticas
install.packages(c('modeest', 'raster', 'moments'))
X = data$mpg
library(modeest) #moda
library(raster) #Quantiles, Coef-variacion
library(moments) #Coef-asimetria, coef-curtosis
mean(X)
median(X)
mfv(X)
quantile(X)
var(X)
sd(X)
cv(X)
skewness(X)
kurtosis(X)
hist(X)
data = read.csv('data/tema2/auto-mpg.csv',
stringsAsFactors = False)
data = read.csv('data/tema2/auto-mpg.csv',
stringsAsFactors = F)
View(data)
#Index by position
data[1:5,8:9]
#Index by Name
data[1:5,c('model_year', 'car_name')]
#Min/Max de mpg
data[data$mpg == max(data$mpg) | data$mpg == min(data$mpg),]
#Filtros con condiciones
data[data$mpg>30 & data$cylinders == 6,]
#Filtros con condiciones
data[data$mpg>30 & data$cylinders == 6,c('car_name', 'mpg')]
data[data$mpg>30 & data$cyl == 6, c('car_name', 'mpg')]
subset(data, mpg>30 & cylinders == 6, select = c('car_name', 'mpg'))
## EXCLUIR COLUMNAS
data[1:5, c(-1,-9)]
data[1:5, -c(1,9)]
#pero no funciona si se indica el nombre
data[1:5, -c('No', 'car_name')]
data[1:5, !names(data) %in% c('No', 'car_name')]
data[data$mpg %in% c(15,20), c('car_name', 'mpg')]
#tambien se puede hacer con las filas
data[c(F,F,F,F,T), c(F,F,T)]
